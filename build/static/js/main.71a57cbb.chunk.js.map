{"version":3,"sources":["components/header/search/index.js","components/header/index.js","components/content/list/todoItem/index.js","components/content/list/index.js","components/content/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","enterPress","event","key","props","target","value","type","onKeyPress","this","className","placeholder","required","autoComplete","Component","Header","todo","add","ToDoItem","checkboxCheck","item","status","id","clickDelete","onChange","checked","text","onClick","List","title","list","filter","length","map","finish","delete","Content","Footer","clear","App","state","setState","preState","newTodo","Object","assign","push","Date","getTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71a57cbb.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './index.css'\nclass Search extends Component {\n    enterPress = (event) => {\n        if(event.key === 'Enter') {\n            this.props.enterPress(event.target.value)\n            event.target.value = ''\n        }\n    }\n    render() {\n        return (<input type=\"text\" onKeyPress={this.enterPress} className=\"search\" placeholder=\"添加\" required=\"required\" autoComplete=\"off\"></input>)\n    }\n}\n\nexport default Search","import React, { Component } from 'react'\nimport Search from './search'\nimport './index.css'\nclass Header extends Component {\n    render() {\n        return (<div className=\"header\">\n            <div className=\"header-content\">\n                <div className=\"header-title\">ToDoList</div>\n                <Search enterPress={this.props.todo.add}/>\n            </div>\n        </div>)\n    }\n}\n\nexport default Header","import React, { Component } from 'react'\nimport './index.css'\n\nclass ToDoItem extends Component {\n    checkboxCheck = () => {\n        this.props.item.status === 'working' && this.props.checkboxCheck(this.props.item.id)\n    }\n    clickDelete = () => {\n        this.props.clickDelete(this.props.item.id)\n    }\n    render() {\n        return (<div className={'ToDoItem' + (this.props.item.status === 'finished' ? ' ToDoItem-finish' : '')}>\n           <input type=\"checkbox\" onChange={this.checkboxCheck} checked={this.props.item.status === 'finished'} ></input>\n           <p>{this.props.item.text}</p>\n           <span onClick={this.clickDelete}>-</span> \n        </div>)\n    }\n}\n\nexport default ToDoItem ","import React, { Component } from 'react'\nimport TodoItem from './todoItem'\nimport './index.css'\n\nclass List extends Component {\n    render() {\n        return (<div className=\"list\">\n            <h2 className=\"list-title\">\n                {this.props.title}\n                <span className=\"title-numb\">{this.props.todo.list.filter(item => {\n                    return item.status === this.props.status\n                }).length}</span>    \n            </h2>\n            <div>\n                {\n                    this.props.todo.list.filter(item => {\n                        return item.status === this.props.status\n                    }).map(item => {\n                        return <TodoItem item={item} checkboxCheck={this.props.todo.finish} key={item.id} clickDelete={this.props.todo.delete}/>\n                    })\n                }\n            </div>\n        </div>)\n    }\n}\n\nexport default List","import React, { Component } from 'react'\nimport List from './list'\nimport './index.css'\nclass Content extends Component{\n    render() {\n        return (<div className=\"content\">\n            <List title=\"进行中\" todo={this.props.todo} status=\"working\"/>\n            <List title=\"已完成\" todo={this.props.todo} status=\"finished\"/>\n        </div>)\n    }\n}\n\nexport default Content","import React, { Component } from 'react'\nimport './index.css'\n\nclass Footer extends Component {\n    clear = () => {\n        this.props.clear()\n    }\n    render() {\n        return (<div className=\"footer\"> <span className=\"clear-btn\" onClick={this.clear}>clear</span></div>)\n    }\n}\n\nexport default Footer","import React, { Component } from 'react';\n\nimport Header from './components/header'\nimport Content from './components/content'\nimport Footer from './components/footer' \n\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      todo: {\n        list: [],\n        add: (item) => {\n          this.setState(preState => {\n            let newTodo = preState.todo\n            let list = Object.assign([], newTodo.list)\n            list.push({\n              text: item,\n              id: new Date().getTime(),\n              status: 'working'\n            })\n            newTodo.list = list\n            return {\n              todo: newTodo\n            }\n          })\n        },\n        delete: (id) => {\n          this.setState(preState => {\n            let newTodo = preState.todo\n            let list = newTodo.list.filter(item => id !== item.id)\n            newTodo.list = list\n            return {\n              todo: newTodo\n            }\n          })\n        },\n        finish: (id) => {\n          this.setState(preState => {\n            let newTodo = preState.todo\n            let list = newTodo.list.map(item => {\n              if(item.id === id) {\n                item.status = 'finished'\n              }\n              return item\n            })\n            newTodo.list = list\n            return {\n              todo: newTodo\n            }\n          })\n        },\n        clear: () => {\n          this.setState(preState => {\n            let newTodo = preState.todo\n            newTodo.list = []\n            return {\n              todo: newTodo\n            }\n          })\n        }\n      }\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header todo={this.state.todo}></Header>\n        <Content todo={this.state.todo}></Content>\n        <Footer clear={this.state.todo.clear}></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}